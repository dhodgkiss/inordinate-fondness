fvc.rand1 <- capture.output(anova(fvm.glm,fvm.glmm6))
fvc.rand2 <- capture.output(anova(fvm.glm2,fvm.glmm6))
#create text file
cat("*****Mint v Control All FVis summary***** \n", fvc.sum, "\n*****Significance of fixed effects***** \n",
fvc.drop, "\n*****Significance of random effect of Visit*****\n", fvc.rand1,"\n*****Significance of random effect of Plot*****\n", fvc.rand2, "\n*****Post-hoc test results*****\n",
fvc.post, file="C:/Users/Dylan/Documents/PhD Syrphidae/Data/Wildflower_plots_HLF/Results/MintVContAllFVis.txt",
sep='\n', append=TRUE)
#post-hoc tests to see where differences lie
fvm.ls = lsmeans(fvm.glmm6,
pairwise ~ Trt,
adjust="tukey",
type="response")
fvm.ls
#create a table with letters showing significantly different treatments
CLDfvm = cld(fvm.ls,
alpha=0.05,
Letters=letters,      ### Use lower-case letters for .group
adjust="tukey",
type="response")       ### Tukey-adjusted comparisons
CLDfvm
#assign new column for data labels in correct order for graph
CLDfvm$group <- c("a","b")
CLDfvm
### Plot
pd = position_dodge(0.4)
ggplot(CLDfvm,
aes(x     = Trt,
y     = response,
label = group)) +
geom_point(shape  = 15,
size   = 4,
position = pd) +
geom_errorbar(aes(ymin  =  response-SE,
ymax  =  response+SE),
width =  0.2,
size  =  0.7,
position = pd) +
ylab("Flower visitors  +/- SE") + #update axis labels
theme_bw() +
theme(axis.title.x=element_text( size="28"),       #change font sizes
axis.title.y=element_text(size="28"),
axis.text.x= element_text( size= "22"),
axis.text.y = element_text( size="22")) +
scale_x_discrete(labels=c("C"="Coriander","F"="Forget-me-not",
"M"="Mint", "X"="Control")) +          #change trt labels
xlab("Treatment") + ylab("Flower visitors +/- SE")+ #update axis labels
geom_text(nudge_x = c(0, 0),
nudge_y = c(5, 13),
color   = "black",
size = 9)
#assign new column for data labels in correct order for graph
CLDfvm$group <- c("b","a")
CLDfvm
### Plot
pd = position_dodge(0.4)
ggplot(CLDfvm,
aes(x     = Trt,
y     = response,
label = group)) +
geom_point(shape  = 15,
size   = 4,
position = pd) +
geom_errorbar(aes(ymin  =  response-SE,
ymax  =  response+SE),
width =  0.2,
size  =  0.7,
position = pd) +
ylab("Flower visitors  +/- SE") + #update axis labels
theme_bw() +
theme(axis.title.x=element_text( size="28"),       #change font sizes
axis.title.y=element_text(size="28"),
axis.text.x= element_text( size= "22"),
axis.text.y = element_text( size="22")) +
scale_x_discrete(labels=c("C"="Coriander","F"="Forget-me-not",
"M"="Mint", "X"="Control")) +          #change trt labels
xlab("Treatment") + ylab("Flower visitors +/- SE")+ #update axis labels
geom_text(nudge_x = c(0, 0),
nudge_y = c(5, 13),
color   = "black",
size = 9)
ggplot(CLDfvm,
aes(x     = Trt,
y     = response,
label = group)) +
geom_point(shape  = 15,
size   = 4,
position = pd) +
geom_errorbar(aes(ymin  =  response-SE,
ymax  =  response+SE),
width =  0.2,
size  =  0.7,
position = pd) +
ylab("Flower visitors  +/- SE") + #update axis labels
theme_bw() +
theme(axis.title.x=element_text( size="28"),       #change font sizes
axis.title.y=element_text(size="28"),
axis.text.x= element_text( size= "22"),
axis.text.y = element_text( size="22")) +
scale_x_discrete(labels=c("C"="Coriander","F"="Forget-me-not",
"M"="Mint", "X"="Control")) +          #change trt labels
xlab("Treatment") + ylab("Flower visitors +/- SE")+ #update axis labels
geom_text(nudge_x = c(0, 0),
nudge_y = c(10, 20),
color   = "black",
size = 9)
ggplot(CLDfvm,
aes(x     = Trt,
y     = response,
label = group)) +
geom_point(shape  = 15,
size   = 4,
position = pd) +
geom_errorbar(aes(ymin  =  response-SE,
ymax  =  response+SE),
width =  0.2,
size  =  0.7,
position = pd) +
ylab("Flower visitors  +/- SE") + #update axis labels
theme_bw() +
theme(axis.title.x=element_text( size="28"),       #change font sizes
axis.title.y=element_text(size="28"),
axis.text.x= element_text( size= "22"),
axis.text.y = element_text( size="22")) +
scale_x_discrete(labels=c("C"="Coriander","F"="Forget-me-not",
"M"="Mint", "X"="Control")) +          #change trt labels
xlab("Treatment") + ylab("Flower visitors +/- SE")+ #update axis labels
geom_text(nudge_x = c(0, 0),
nudge_y = c(11, 22),
color   = "black",
size = 9)
ggplot(CLDfvm,
aes(x     = Trt,
y     = response,
label = group)) +
geom_point(shape  = 15,
size   = 4,
position = pd) +
geom_errorbar(aes(ymin  =  response-SE,
ymax  =  response+SE),
width =  0.2,
size  =  0.7,
position = pd) +
ylab("Flower visitors  +/- SE") + #update axis labels
theme_bw() +
theme(axis.title.x=element_text( size="28"),       #change font sizes
axis.title.y=element_text(size="28"),
axis.text.x= element_text( size= "22"),
axis.text.y = element_text( size="22")) +
scale_x_discrete(labels=c("C"="Coriander","F"="Forget-me-not",
"M"="Mint", "X"="Control")) +          #change trt labels
xlab("Treatment") + ylab("Flower visitors +/- SE")+ #update axis labels
geom_text(nudge_x = c(0, 0),
nudge_y = c(11, 24),
color   = "black",
size = 9)
CLDfvm
fvm.ls
blogdown::serve_site()
?filter
??filter
?subset
??subset
blogdown::serve_site
blogdown::serve_site()
?subset
#import data into R
poldata <- read.csv(file.choose())
#create subsets of visitor data by site type
visopen <- subset(poldata, Type == "open", select = FG:Week)
visdata <- read.xlsx(file.choose(),sheet="Records")
library(openxlsx)
visdata <- read.xlsx(file.choose(),sheet="Records")
install.packages("openxlsx")
library(openxlsx)
visdata <- read.xlsx(file.choose(),sheet="Records")
#create subsets of visitor data by site type
visopen <- subset(visdata, Type == "open", select = FG:Week)
visopen
#create subsets of visitor data by site type
visopen <- subset(visdata, Type == "open")
visopen
#create subsets of visitor data by site type
visopen <- subset(visdata, Type == "open", select=FG:Week)
visopen
?subset
blogdown::serve_site()
?subset
?filter
?dplyr::filter
f <- fvs %>%
filter(Trt == 'M', Visit > 5)
library(lme4)
#load MuMIn package for AICc function
library(MuMIn)
#load package for p-values after running lmer
library(lmerTest)
#load lsmeans package for fitted means of lmms and glmms
library(lsmeans)
#load piecewiseSEM for model fit metrics for lmer
library(piecewiseSEM)
#load MASS package for negative binomial GLMs and GLMMs
library(MASS)
#load ordinal pacakge for cumulative link models
library(ordinal)
#for levene's test and Anova()
library(car)
#for summarySE function
library(Rmisc)
library(ggplot2)
library(FSA)
library(lattice)
library(multcompView)
library(scales)
library(Hmisc)
library(glmmADMB)
library(MCMCglmm)
library(plyr)
library(glmmTMB)
library(bbmle)
library(tidyr)
library(dplyr)
library(vegan)
#############################################################
#import data into R
fvs <- read.csv(file.choose())
f <- fvs %>%
filter(Trt == 'M', Visit > 5)
g <- fvs %>%
subset(Trt == 'M', Visit > 5)
f == g
f
View(f)
View(g)
g <- fvs %>%
subset(Trt == 'M' & Visit > 5)
View(g)
f == g
?subset
f <- fvs %>%
subset(Trt == 'M' & Visit > 5, select = -Trt)
View(f)
testdf3 <- fgs %>%
subset(Mean_okta > 5, select = c(Apis,Syrphidae, Mean_okta))
library(lme4)
#load MuMIn package for AICc function
library(MuMIn)
#load package for p-values after running lmer
library(lmerTest)
#load lsmeans package for fitted means of lmms and glmms
library(lsmeans)
#load piecewiseSEM for model fit metrics for lmer
library(piecewiseSEM)
#load MASS package for negative binomial GLMs and GLMMs
library(MASS)
#load ordinal pacakge for cumulative link models
library(ordinal)
#for levene's test and Anova()
library(car)
#for summarySE function
library(Rmisc)
library(ggplot2)
library(FSA)
library(lattice)
library(multcompView)
library(scales)
library(Hmisc)
library(glmmADMB)
library(MCMCglmm)
library(plyr)
library(glmmTMB)
library(bbmle)
library(tidyr)
library(dplyr)
library(vegan)
testdf3 <- fgs %>%
subset(Mean_okta > 5, select = c(Apis,Syrphidae, Mean_okta))
fgs <- read.csv(file.choose())
testdf3 <- fgs %>%
subset(Mean_okta > 5, select = c(Apis,Syrphidae, Mean_okta))
View(testdf3)
testdf3 <- fgs %>%
subset(Mean_okta > 5, select = c(Apis:Syrphidae, Mean_okta))
View(testdf3)
blogdown::serve_site()
testdf2 <- fgs %>%
filter(Mean_okta > 5 & Mean_okta < 7) %>%
select(c(Apis:Syrphidae, Mean_okta))
View(testdf2)
testdf2 <- fgs %>%
filter(Mean_okta > 5 , Mean_okta < 7) %>%
select(c(Apis:Syrphidae, Mean_okta))
View(testdf2)
testdf2 <- fgs %>%
filter(Mean_okta > 5 , Mean_okta < 7) %>%
select(-Mean_wind))
testdf2 <- fgs %>%
filter(Mean_okta > 5 , Mean_okta < 7) %>%
select(-Mean_wind)
View(testdf2)
?[]
?[
??[
testdf <- fgs[which(fgs$Mean_okta > 5, fgs$Trt =='C'),c(2:5, 17:19)]
View(testdf)
head(fgs)
testdf <- fgs[which(fgs$Mean_okta > 5, fgs$Trt =='C'),c(2:6, 17:19)]
View(testdf)
testdf <- fgs[which(fgs$Mean_okta > 5, fgs$Trt =='C'),c(2:6, 17:19)]
View(testdf)
testdf <- fgs[which(fgs$Mean_okta > 5 & fgs$Trt =='C'),c(2:6, 17:19)]
View(testdf)
testdf <- fgs[which(fgs$Mean_okta > 5),c(2:6, 17:19)]
View(testdf)
testdf <- fgs[which(fgs$Mean_okta > 5),]
View(testdf)
testdf <- fgs[which(fgs$Mean_okta > 5, fgs$Trt=='C'),]
View(testdf)
testdf <- fgs[which(fgs$Trt=='C'),]
View(testdf)
testdf <- fgs[which(fgs$Trt=='C' & fgs$Mean_okta > 5),]
View(testdf)
testdf <- fgs[which(fgs$Mean_okta>5 & fgs$Trt == 'C'),]
View(testdf)
testdf <- fgs[which(fgs$Mean_okta>5 & fgs$Trt == 'C'),c(fgs$Trt,fgs$Mean_okta)]
View(testdf)
testdf <- fgs[which(fgs$Mean_okta>5 & fgs$Trt == 'C'),names(fgs) %in% c('Trt','Mean_okta')]
View(testdf)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
##################### Data tidying ###########################
# The following couple blocks of code are preparing the data
# into a format that makes it possible to perform the analyses
# These lines of code only need to be executed once then the
# files will be saved in the appropriate format
##############################################################
?spread
library(lme4)
#load MuMIn package for AICc function
library(MuMIn)
#load package for p-values after running lmer
library(lmerTest)
#load lsmeans package for fitted means of lmms and glmms
library(lsmeans)
#load piecewiseSEM for model fit metrics for lmer
library(piecewiseSEM)
#load MASS package for negative binomial GLMs and GLMMs
library(MASS)
#load ordinal pacakge for cumulative link models
library(ordinal)
#for levene's test and Anova()
library(car)
#for summarySE function
library(Rmisc)
library(ggplot2)
library(FSA)
library(lattice)
library(multcompView)
library(scales)
library(Hmisc)
library(glmmADMB)
library(MCMCglmm)
library(plyr)
library(glmmTMB)
library(bbmle)
library(tidyr)
library(dplyr)
library(vegan)
##################### Data tidying ###########################
# The following couple blocks of code are preparing the data
# into a format that makes it possible to perform the analyses
# These lines of code only need to be executed once then the
# files will be saved in the appropriate format
##############################################################
?spread
?gather
##################### Data tidying ###########################
# The following couple blocks of code are preparing the data
# into a format that makes it possible to perform the analyses
# These lines of code only need to be executed once then the
# files will be saved in the appropriate format
##############################################################
?spread
?gather
library(Rmisc)
library(ggplot2)
library(openxlsx)
library(vegan)
library(tidyr)
library(scales)
library(plyr)
rf<- read.csv(file.choose())
head(rf)
#change table from wide to long format
rf.long<-gather(rf,FG,RF,Apis:Syrphidae,factor_key=TRUE)
rf<- read.csv(file.choose())
head(rf)
rf<- read.csv(file.choose())
head(rf)
#change table from wide to long format
rf.long<-gather(rf,FG,RF,Apis:Syrphidae,factor_key=TRUE)
rf.long
View(rf.long)
?gather
#change table from wide to long format
rf.long<-gather(rf,FG,RF,Apis:Syrphidae,factor_key=FALSE)
View(rf.long)
str(rf.long)
#change table from wide to long format
rf.long<-gather(rf,FG,RF,Apis:Syrphidae,factor_key=TRUE)
str(rf.long)
rf.long2 <- ddply(rf.long, .(Week),
transform, pos = 1- (cumsum(RF) - (0.5 * RF)))
rf.long2
blogdown::serve_site()
Survey <- c(1:6)
Date <- c("10/06/2017","18/06/2017","25/06/2017",
"05/07/2017", "12/07/2017","21/07/2017")
Site <- c("CO1","CO2","CO3","OP1","OP2","OP3")
Bumblebees <- c(5,4,10,8,3,2)
Honeybees <- c(2,1,5,3,2,7)
Hoverflies <- c(3,0,1,2,5,9)
Solitary_Bees <- c(0,2,1,5,4,2)
poldat <- data.frame(Survey, Date, Site,
Bumblebees,Honeybees,Solitary_Bees)
head(poldat)
poldat.long <- poldat %>%
gather(FunctGroup, Count, Bumblebees:Solitary_Bees, factor_key = TRUE)
head(poldat.long)
View(poldat.long)
blogdown::serve_site()
blogdown::serve_site()
?spread
library(tidyr)
?spread
#############################################################
#import data into R
fvs <- read.csv(file.choose())
############ Convert all fvis data to wide format and group by survey ##################
#fill=0 sets all empty cells to 0 rather than NA,
#convert = TRUE converts new columns to the type that
#they appear to be rather than strings
allFG <- spread(fvs,FG,TotCount, fill = 0, convert = TRUE, sep = ".")
#############################################################
#import data into R
fvs <- read.csv(file.choose())
############ Convert all fvis data to wide format and group by survey ##################
#fill=0 sets all empty cells to 0 rather than NA,
#convert = TRUE converts new columns to the type that
#they appear to be rather than strings
allFG <- spread(fvs,FG,TotCount, fill = 0, convert = TRUE, sep = ".")
head(allFG)
poldat.wide <- poldat.long %>%
spread(FunctGroup, Count, convert = TRUE)
Survey <- c(1:6)
Date <- c("10/06/2017","18/06/2017","25/06/2017",
"05/07/2017", "12/07/2017","21/07/2017")
Site <- c("CO1","CO2","CO3","OP1","OP2","OP3")
Bumblebees <- c(5,4,10,8,3,2)
Honeybees <- c(2,1,5,3,2,7)
Hoverflies <- c(3,0,1,2,5,9)
Solitary_Bees <- c(0,2,1,5,4,2)
poldat <- data.frame(Survey, Date, Site,
Bumblebees,Honeybees,Solitary_Bees)
head(poldat)
str(poldat)
poldat.long <- poldat %>%
gather(FunctGroup, Count, Bumblebees:Solitary_Bees, factor_key = TRUE)
head(poldat.long)
str(poldat.long)
poldat.wide <- poldat.long %>%
spread(FunctGroup, Count, convert = TRUE)
str(poldat.wide)
poldat.wide <- poldat.long %>%
spread(FunctGroup, Count, convert = FALSE)
str(poldat.wide)
poldat.wide <- poldat.long %>%
spread(FunctGroup, Count, convert = TRUE)
str(poldat.wide)
str(poldat)
poldat.long <- poldat %>%
gather(FunctGroup, Count, Bumblebees:Solitary_Bees, factor_key = TRUE)
str(poldat.long)
poldat.wide <- poldat.long %>%
spread(FunctGroup, Count, convert = FALSE)
str(poldat.wide)
poldat.wide <- poldat.long %>%
spread(FunctGroup, Count)
str(poldat.wide)
head(poldat.wide)
head(poldat)
all(poldat == poldat.wide)
#assemble the data frame
poldat <- data.frame(Survey, Date, Site,
Bumblebees,Honeybees,Solitary_Bees)
#convert poldat to long format
poldat.long <- poldat %>%
gather(FunctGroup, Count, Bumblebees:Solitary_Bees, factor_key = FALSE)
head(poldat.long)
str(poldat.long)
#convert poldat to long format
poldat.long <- poldat %>%
gather(FunctGroup, Count, Bumblebees:Solitary_Bees, factor_key = TRUE)
head(poldat.long)
str(poldat.long)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
